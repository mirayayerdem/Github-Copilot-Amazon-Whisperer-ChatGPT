{"task_id": "HumanEval/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "entry_point": "simplify", "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "test": "from numpy import True_\n\n\ndef check(candidate):\n    assert candidate(\"1/5\", \"5/1\") == True\n    assert candidate(\"1/6\", \"2/1\") == False\n    assert candidate(\"5/1\", \"3/1\") == True\n    assert candidate(\"7/10\", \"10/2\") == False\n    assert candidate(\"2/10\", \"50/10\") == True\n    assert candidate(\"7/2\", \"4/2\") == True\n    assert candidate(\"11/6\", \"6/1\") == True\n    assert candidate(\"2/3\", \"5/2\") == False\n    assert candidate(\"5/2\", \"3/5\") == False\n    assert candidate(\"2/4\", \"8/4\") == True\n    assert candidate(\"2/4\", \"4/2\") == True\n    assert candidate(\"1/5\", \"1/5\") == False"}