{"task_id": "HumanEval/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "entry_point": "find_max", "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "test": "def check(candidate):\n    assert candidate([\"name\", \"of\", \"string\"]) == \"string\"\n    assert candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n    assert candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    assert candidate([\"abc\", \"cba\"]) == \"abc\"\n    assert candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"\n    assert candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n    assert candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"\n    assert candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n    assert candidate([\"b\"]) == \"b\"\n    assert candidate([\"play\", \"play\", \"play\"]) == \"play\""}